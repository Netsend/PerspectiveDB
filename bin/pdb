#!/usr/bin/env node

/**
 * Copyright 2015 Netsend.
 *
 * This file is part of PerspectiveDB.
 *
 * PerspectiveDB is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PerspectiveDB is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with PerspectiveDB. If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * Start the PerspectiveDB server.
 *
 * - Parse options
 * - Read config
 * - Init master
 * - Start servers and clients
 */

'use strict';

var path = require('path');

var programName = path.basename(__filename, '.js');
var dirname = path.dirname;

if (process.getuid() !== 0) {
  console.error('%s: execute as root', programName);
  process.exit(1);
}

var fs = require('fs');

var async = require('async');
var hjson = require('hjson');
var program = require('commander');
var xtend = require('xtend');

var logger = require('../lib/logger');
var Master = require('../lib/master');
var loadSecrets = require('../lib/load_secrets');

program
  .version(require('../package.json').version)
  .usage('config.hjson')
  .parse(process.argv);

var log;

var startTime = new Date();

var configFile = program.args[0];

if (!configFile) {
  program.help();
}

var config = hjson.parse(fs.readFileSync(configFile, 'utf8'));

// set config base
config.configBase = dirname(configFile) + '/';

// prepend the config base to all relative path specifications in the config file
if (config.wss) {
  if (config.wss.cert && config.wss.cert[0] !== '/') {
    config.wss.cert = config.configBase + config.wss.cert;
  }
  if (config.wss.key && config.wss.key[0] !== '/') {
    config.wss.key = config.configBase + config.wss.key;
  }
  if (config.wss.dhparam && config.wss.dhparam[0] !== '/') {
    config.wss.dhparam = config.configBase + config.wss.dhparam;
  }
}

var logCfg = config.log || {};

// load log configuration, initialize with default global log files
// open log files if neccesary
function loadLog(cfg, cb) {
  cfg = cfg || {};

  cfg = xtend(logCfg, {
    file: log.getFileStream(),
    error: log.getErrorStream(),
    mask: logger.levelToPrio(cfg.level || logCfg.level)
  }, cfg);

  // ensure async even without any other tasks
  var tasks = [function(cb2) { process.nextTick(cb2); }];

  if (cfg.file) {
    tasks.push(function(cb2) {
      logger.openFile(cfg.file, function(err, f) {
        if (err) { cb2(err); return; }
        cfg.file = f;
        cb2();
      });
    });
  }

  if (cfg.error) {
    tasks.push(function(cb2) {
      logger.openFile(cfg.error, function(err, f) {
        if (err) { cb2(err); return; }
        cfg.error = f;
        cb2();
      });
    });
  }

  async.series(tasks, function(err) {
    cb(err, cfg);
  });
}

function start() {
  (function(cb) {
    var error;
    var tasks = [];

    // load password hashes from config or password files for each perspective
    var files = {};
    config.dbs.forEach(function(dbCfg) {
      if (!dbCfg.perspectives || !dbCfg.perspectives.length) { return; }
      dbCfg.perspectives.forEach(function(pdbCfg) {
        var username = pdbCfg.username || pdbCfg.name;
        var file = pdbCfg.passdb;

        if (file) {
          // load passdb hashes from a file
          // prepend the config base to all relative path specifications in the config file
          if (file[0] !== '/') {
            file = config.configBase + file;
          }
          if (!files[file]) { // if not cached
            try {
              files[file] = loadSecrets(file);
            } catch(err) {
              console.error('%s: %s: %s', programName, file, err);
              cb(err);
              return;
            }
          }
        }
        var hash = files[file] && files[file][username] || '';

        if (!username) {
          error = new Error('no name or username configured');
          console.error('%s: %s: %s', programName, dbCfg.name, error);
          cb(error);
          return;
        }
        // if it's a hash, set one user account
        if (hash.indexOf('$2a$') === 0) {
          pdbCfg.passdb = [{ username: username, password: hash, realm: dbCfg.name }];
        }
      });
    });

    // setup tunnel logging
    tasks.push(function(cb2) {
      // ensure specific log configurations overrule the global log config
      async.eachSeries(config.tunnels || [], function(tunnelCfg, cb3) {
        log.info('loading tunnel: %s', tunnelCfg.connect);
        loadLog(tunnelCfg.log, function(err, cfg) {
          if (err) { cb3(err); return; }
          tunnelCfg.log = cfg;
          cb3();
        });
      }, cb2);
    });

    // setup db logging
    tasks.push(function(cb2) {
      async.eachSeries(config.dbs, function(dbCfg, cb3) {
        log.info('loading db: %s', dbCfg.name);
        loadLog(dbCfg.log, function(err, cfg) {
          if (err) { cb3(err); return; }
          dbCfg.log = cfg;

          // setup db perspective client logging
          async.eachSeries(dbCfg.perspectives, function(peCfg, cb4) {
            log.info('loading pe: %s', peCfg.name);
            loadLog(peCfg.log, function(err, cfg) {
              if (err) { cb4(err); return; }
              peCfg.log = cfg;
              cb4();
            });
          }, cb3);
        });
      }, cb2);
    });

    tasks.push(function(cb2) {
      config.log = log;
      var master = new Master(config.dbs, config);

      process.once('SIGINT', function() {
        log.notice('received SIGINT shutting down... press CTRL+C again to force quit');
        master.stopTerm(cb);
      });
      process.once('SIGTERM', function() {
        log.notice('received SIGTERM shutting down... send another SIGTERM to force quit');
        master.stopTerm(cb);
      });

      master.start(cb2);
    });

    async.series(tasks, cb);
  })(function(err) {
    if (err) {
      // append stack trace
      Array.prototype.push.call(arguments, err.stack);
      log.crit.apply(log, arguments);
      process.exit(2);
    }

    log.notice('server down %s', new Date());
    log.info('runtime', new Date() - startTime);
    log.close();
  });
}

logCfg.ident = programName;
logCfg.level = logCfg.level || 'NOTICE';
logCfg.mask = logger.levelToPrio(logCfg.level);

logger(logCfg, function(err, l) {
  if (err) { throw err; }

  log = l;

  log.notice('init %s', startTime);
  start();
});
